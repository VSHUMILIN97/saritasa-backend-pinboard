from collections import namedtuple

import vk
from django.conf import settings
from vk import exceptions as vk_exc

from apps.utils.social_methods.exceptions import VKIncorrectCredentials

__all__ = (
    'link_resolver',
    'VKMarketItem',
    'simulate_session',
    'vk_exc',
    'VKWallPostItem',
    'get_vk_data'
)


VKMarketItem = namedtuple(
    'VK_MarketItem',
    ['user', 'desc', 'photos', 'title', 'price']
)

VKMarketItem.__doc__ = (
    """ Storage for the parse results from the VK API market methods
        All Fields are named for the simplifying usage of this construction
    """
)

VKWallPostItem = namedtuple(
    'VK_WallPostItem',
    ['user', 'desc', 'photos']
)

VKWallPostItem.__doc__ = (
    """ Storage for the parse results from the VK API wall methods
        All Fields are named for the simplifying usage of this construction
    """
)


def link_resolver(link):
    """ Checks whether link contains fields that we've needed """
    return '?w=wall' in link or 'w=product' in link


def simulate_session(token):
    """ Session simulator object

    Args:
        token (str): User access_token generated by OAuth2

    Returns:
        SessionObject (cls): VKWrapper for the user instance
    Raises:
        VKIncorrectCredentials : Risen if users access_token is not valid
        Could happen only on our side
    """
    # Simulate user session
    try:
        # Access token gained from user instance
        vk_session = vk.Session(access_token=token)
    except (vk_exc.VkException, vk_exc.VkAuthError):
        # Looks like it'll never happen, but you can't be sure
        # Tested w/ 123 as token, still works OK..
        # Inner behaviour of vk lib is so-soish, that's why we
        # still check if this error happens there or not

        raise VKIncorrectCredentials
    # Using latest (09.08.18) version of API
    api_wrap = vk.API(vk_session, v=settings.VK_API_VERSION)

    return api_wrap


def get_vk_data(parse_result):
    """The method that organizes data from VK"""

    data = dict()

    data['description'] = parse_result.desc
    try:
        data['price'] = parse_result.price
    except AttributeError:
        data['price'] = settings.DEFAULT_PRICE
    try:
        data['title'] = parse_result.title
    except AttributeError:
        data['title'] = settings.DEFAULT_TITLE
    return data
